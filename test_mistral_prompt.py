#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier que DynaPictures utilise le prompt d'image de Mistral

Ce script teste :
1. L'utilisation du prompt Mistral quand il est fourni
2. Le fallback vers la g√©n√©ration automatique quand il n'y en a pas
3. La gestion des cas d'erreur
"""

import sys
import os
sys.path.append('backend')

from services.dynapictures_service import DynaPicturesService
import logging

# Configuration du logging pour voir les messages
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_mistral_prompt_usage():
    """
    Test principal pour v√©rifier l'utilisation du prompt Mistral
    """
    print("\n" + "="*60)
    print("üß™ TEST: Utilisation du prompt d'image Mistral")
    print("="*60)
    
    # Initialisation du service
    service = DynaPicturesService()
    
    if not service.is_available():
        print("‚ùå Service DynaPictures non disponible (pipeline non charg√©)")
        print("‚ÑπÔ∏è  Ceci est normal si les d√©pendances ne sont pas install√©es")
        return False
    
    print("‚úÖ Service DynaPictures initialis√© avec succ√®s")
    
    # Test 1: Avec prompt Mistral fourni
    print("\nüìù Test 1: Utilisation du prompt Mistral")
    cocktail_with_mistral_prompt = {
        'name': 'Sunset Paradise',
        'ingredients': ['4 cl de rhum blanc', '2 cl de jus d\'orange', '1 cl de grenadine'],
        'description': 'Un cocktail tropical aux couleurs du coucher de soleil',
        'image_prompt': 'Professional cocktail photography of a tropical sunset cocktail in an elegant glass, orange and red gradient colors, garnished with orange slice, black background, studio lighting, hyper-realistic, 4K'
    }
    
    print(f"Prompt Mistral: {cocktail_with_mistral_prompt['image_prompt'][:80]}...")
    result1 = service.generate_cocktail_image(cocktail_with_mistral_prompt)
    
    if result1:
        print(f"‚úÖ Image g√©n√©r√©e avec prompt Mistral: {result1}")
    else:
        print("‚ùå √âchec de g√©n√©ration avec prompt Mistral")
    
    # Test 2: Sans prompt Mistral (fallback)
    print("\nüìù Test 2: Fallback vers g√©n√©ration automatique")
    cocktail_without_prompt = {
        'name': 'Classic Mojito',
        'ingredients': ['5 cl de rhum blanc', '3 cl de jus de citron vert', 'Feuilles de menthe'],
        'description': 'Le mojito classique rafra√Æchissant'
        # Pas de champ 'image_prompt'
    }
    
    print("Aucun prompt Mistral fourni, utilisation de la g√©n√©ration automatique")
    result2 = service.generate_cocktail_image(cocktail_without_prompt)
    
    if result2:
        print(f"‚úÖ Image g√©n√©r√©e avec prompt automatique: {result2}")
    else:
        print("‚ùå √âchec de g√©n√©ration avec prompt automatique")
    
    # Test 3: Prompt Mistral vide
    print("\nüìù Test 3: Prompt Mistral vide (fallback)")
    cocktail_empty_prompt = {
        'name': 'Margarita',
        'ingredients': ['5 cl de tequila', '2 cl de triple sec', '3 cl de jus de citron vert'],
        'description': 'La margarita classique',
        'image_prompt': ''  # Prompt vide
    }
    
    print("Prompt Mistral vide, utilisation de la g√©n√©ration automatique")
    result3 = service.generate_cocktail_image(cocktail_empty_prompt)
    
    if result3:
        print(f"‚úÖ Image g√©n√©r√©e avec prompt automatique (prompt vide): {result3}")
    else:
        print("‚ùå √âchec de g√©n√©ration avec prompt automatique (prompt vide)")
    
    # Test 4: Donn√©es invalides
    print("\nüìù Test 4: Gestion des donn√©es invalides")
    invalid_data = {'description': 'Pas de nom'}  # Manque le champ 'name'
    
    result4 = service.generate_cocktail_image(invalid_data)
    
    if result4 is None:
        print("‚úÖ Gestion correcte des donn√©es invalides (retourne None)")
    else:
        print(f"‚ùå Comportement inattendu avec donn√©es invalides: {result4}")
    
    print("\n" + "="*60)
    print("üèÅ Tests termin√©s")
    print("="*60)
    
    return True

def test_prompt_comparison():
    """
    Test pour d√©montrer l'utilisation des prompts Mistral vs g√©n√©ration automatique
    """
    print("\n" + "="*60)
    print("üîç COMPARAISON: Service simplifi√© avec prompts Mistral")
    print("="*60)
    
    # Exemple de prompt Mistral (ce que le service utilise maintenant)
    mistral_prompt = "Professional photo of a creamy Pi√±a Colada in a hurricane glass, garnished with pineapple wedge and cherry, tropical beach background, golden hour lighting, photorealistic"
    print(f"üß† Prompt Mistral utilis√©: {mistral_prompt}")
    
    print("\nüìä Avantages du service simplifi√©:")
    print(f"   - Utilise directement les prompts optimis√©s de Mistral")
    print(f"   - Plus de g√©n√©ration automatique complexe")
    print(f"   - Code plus simple et maintenable")
    print(f"   - Prompts plus sp√©cifiques et contextualis√©s")
    print(f"   - Longueur prompt: {len(mistral_prompt)} caract√®res")

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests DynaPictures avec prompts Mistral")
    
    try:
        # Test principal
        success = test_mistral_prompt_usage()
        
        # Test de comparaison
        test_prompt_comparison()
        
        if success:
            print("\nüéâ Tous les tests ont √©t√© ex√©cut√©s avec succ√®s!")
            print("‚úÖ DynaPictures utilise maintenant les prompts de Mistral")
        else:
            print("\n‚ö†Ô∏è  Tests ex√©cut√©s mais service non disponible")
            print("‚ÑπÔ∏è  Installez les d√©pendances pour tester la g√©n√©ration r√©elle")
            
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()